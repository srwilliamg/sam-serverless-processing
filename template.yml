AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: SQS to Lambda to SNS with SAM

Globals:
  Function:
    Runtime: nodejs22.x
    Timeout: 30
    CodeUri: ./
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        STAGE: !Sub ${Stage}
        REGION: us-east-1

Parameters:
  Stage:
    Type: String
    Default: dev
    Description: API Gateway stage name

Resources:
  ReceiverQueue:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ReceiverQueue-${Stage}
      ReceiveMessageWaitTimeSeconds: 0
      MessageRetentionPeriod: 60
      VisibilityTimeout: 30
      DelaySeconds: 0
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 5

  DeadLetterQueue:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub DeadLetterQueue-${Stage}
      MessageRetentionPeriod: 1209600 # 14 days
      VisibilityTimeout: 30
      DelaySeconds: 0

  # -------------------------------------#-------------------------------------

  SnsToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ReceiverQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt ReceiverQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref TopicCalledWasMade

  TopicCalledWasMade:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub TopicCalledWasMade-${Stage}
      DisplayName: A Call Has Been Made

  QueueSubscriberToTopic:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref TopicCalledWasMade
      Protocol: sqs
      Endpoint: !GetAtt ReceiverQueue.Arn
      # RawMessageDelivery:

  # LambdaSusbriberToTopic:
  #   Type: AWS::SNS::Subscription
  #   Properties:
  #     TopicArn: !Ref TopicCalledWasMade
  #     Protocol: lambda
  #     Endpoint: !GetAtt ReceiverFunction.Arn
  # DeliveryPolicy:
  # FilterPolicy:
  # RawMessageDelivery:

  # -------------------------------------#-------------------------------------

  ApiGatewayReceiver:
    Type: AWS::Serverless::Api
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Name: !Sub ApiGatewayReceiver-${Stage}
      Description: API Gateway for receiving messages
      StageName: !Sub ${Stage}
      Auth:
        ApiKeyRequired: true
      Cors:
        AllowMethods: "'GET,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Name: !Sub ApiKey-${Stage}
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ApiGatewayReceiver
          StageName: !Ref ApiGatewayReceiver.Stage
      Description: API Key for accessing the API

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      Description: Usage plan for the API
      ApiStages:
        - ApiId: !Ref ApiGatewayReceiver
          Stage: !Ref ApiGatewayReceiver.Stage
      Quota:
        Limit: 1000
        Period: MONTH
      Throttle:
        BurstLimit: 20
        RateLimit: 10

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  # -------------------------------------#-------------------------------------

  MessageProcessorFunction:
    FunctionName: !Sub MessageProcessorFunction-${Stage}
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - src/handlers/sqs-message-processor/index.ts
    Properties:
      Handler: src/handlers/sqs-message-processor/index.handler
      Environment:
        Variables:
          QUEUE_URL: !Ref ReceiverQueue
          DEAD_LETTER_QUEUE_URL: !Ref DeadLetterQueue
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ReceiverQueue.Arn
            BatchSize: 10

  ReceiverFunction:
    FunctionName: !Sub ReceiverFunction-${Stage}
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - src/handlers/receiver/index.ts
    Properties:
      Handler: src/handlers/receiver/index.handler
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref TopicCalledWasMade
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayReceiver
            Path: /
            Method: get
            Auth:
              ApiKeyRequired: true
      Policies:
        - AWSLambdaSQSQueueExecutionRole
        - Statement:
            - Effect: Allow
              Action: sns:Publish
              Resource: !Ref TopicCalledWasMade

  # -------------------------------------#-------------------------------------

Outputs:
  SqsQueueArn:
    Description: ARN of the SQS Queue
    Value: !GetAtt ReceiverQueue.Arn
  SnsTopicArn:
    Description: ARN of the SNS Topic
    Value: !Ref TopicCalledWasMade
  MessageProcessorFunctionArn:
    Description: ARN of the MessageProcessorFunction Function
    Value: !GetAtt MessageProcessorFunction.Arn
  ReceiverFunctionArn:
    Description: ARN of the ReceiverFunction Function
    Value: !GetAtt ReceiverFunction.Arn
  ApiKey:
    Description: API Key for accessing the API
    Value: !Ref ApiKey
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGatewayReceiver}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
